from scipy.optimize import linprog

#Вариант 31. Решите матричную игру
# A=(1,2,3//5,3,4//1,4,0)
#F(w1, w2,w3) = w1+w2+w3 → max
# w1 + 2w2+3w3<= 1,
# 5w1 + 3w2+4w3<= 1,
# w1 + 4w2<= 1,
# w1,w2,w3 >=0

#F(x1, x2) = 1/4x1 + x2 → min
# A: x1 + 3x2>= 6,
# B: 4x1 + x2>= 8,
# C: 3x1+2x2>=11,
# x1>=0, x2>=0.
# Задание системы координат

obj = [-1, -1, -1]
#      ─┬  ─┬  Коэффициент для x3
#       │   └┤ Коэффициент для x2
#       └────┤ Коэффициент для x1

lhs_ineq = [[1, 2, 3],  # левая сторона красного неравенства
            [5, 3, 4],  # левая сторона синего неравенства
            [1, 4, 0]]  # левая сторона желтого неравенства

rhs_ineq = [1,  # правая сторона красного неравенства
            1,  # правая сторона синего неравенства
            1]  # правая сторона желтого неравенства

# Если чтото будет =, то код ниже:
#lhs_eq = [[-1, 5]]  # левая сторона зеленого равенства
#rhs_eq = [15]       # правая сторона зеленого равенства

opt = linprog(c=obj, A_ub=lhs_ineq, b_ub=rhs_ineq,
              method="revised simplex")

#print(opt)


F_max=opt.x[0] + opt.x[1] + opt.x[2]

newx1=opt.x[0]/F_max
newx2=opt.x[1]/F_max
newx3=opt.x[2]/F_max

game_price = 1/F_max
print(f'Ответ: X* = ({newx1, newx2, newx3})' + f' оптимальная стратегия I игрока, Y∗ = ({newx1, newx2, newx3}) – оптимальная стратегия II игрока,' + f'νA = {round(game_price, 1)} – цена игры.')
